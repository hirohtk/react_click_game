{"version":3,"sources":["components/wrapper.js","components/cards.js","components/modal.js","components/jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Cards","onClick","makeClick","id","hoverClass","onMouseEnter","hover","onMouseLeave","unhover","src","route","picnum","alt","GameModal","useState","setShow","Modal","show","open","onHide","Header","closeButton","Title","color","winOrLose","Body","Footer","Button","variant","hideModal","Jumbotron","pointsScored","highScore","App","state","pictures","picturesClicked","message","messageColor","newArray","i","length","push","setState","includes","console","log","randomize","cap","random","Math","floor","this","map","pics","index","key","test2","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a03ed90.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n    // props.children is referencing whatever is put within the Wrapper tag on the app level\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"wrapper\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\nimport \"./cards.css\";\r\n\r\nfunction Cards(props) {\r\n    return (\r\n        <div className=\"cardDiv\" onClick={() => props.makeClick(props.id)}>\r\n            <div className={`card ${props.hoverClass}`} onMouseEnter={() => props.hover(props.id)} onMouseLeave={() => props.unhover(props.id)}>\r\n                <img className=\"card-img-top\" src={props.route} picnum={props.id} alt=\"Card\"></img>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;\r\n","import React, { useState } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport \"./modal.css\";\r\n \r\nfunction GameModal(props) {\r\n\r\n  // show is a boolean, setShow is a function\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => {setShow(false)};\r\n\r\n  // DID NOT NEED FOR MY PURPOSES\r\n  // const handleShow = () => setShow(true);\r\n\r\n  // console.log(\"props.open is \" + props.open);\r\n\r\n  return (\r\n    <>\r\n       {/* show expects a boolean (true) to open, false to close */}\r\n      <Modal show={(props.open) ? (props.open) : false} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title><p id={props.color}>{props.winOrLose}</p></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Play again!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={() => props.hideModal()}>\r\n            Got it!\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameModal;","import React from \"react\";\r\n\r\nimport \"./jumbotron.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <h1 className=\"\"><strong>Clicky Game!</strong> </h1>\r\n            <h3 className=\"\">Powered by Create-React-App</h3>\r\n            <p className=\"lead\">Points Scored: {props.pointsScored}</p>\r\n            <p>High Score: {props.highScore}</p>\r\n            {/* {\r\n            // this is why .map() works- the way an array is rendered is quite simple, it's just all of the array values\r\n            [1, 2, 3, 4, 5]\r\n          } */}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport Wrapper from './components/wrapper';\nimport Cards from \"./components/cards\"\nimport GameModal from \"./components/modal\";\nimport Jumbotron from \"./components/jumbotron\"\n\nimport pictures from \"./pictures.json\"\n\nclass App extends React.Component {\n\n  // state controls ALL components below.  If needing to change state on a particular component, need to use an array for that state property\n  state = {\n    pictures,\n    hoverClass: [],\n    pointsScored: 0,\n    picturesClicked: [],\n    highScore: 0,\n    message: \"\",\n    messageColor: \"\",\n    open: false\n  }\n\n  hover = id => {\n\n    const newArray = [];\n    for (let i = 0; i < this.state.pictures.length; i++) {\n      if (id === this.state.pictures[i].id) {\n        newArray.push(\"hover\");\n      }\n      else {\n        newArray.push(\"\");\n      }\n    }\n    // this new array will be made every time you hover, and the particular index of this array that matches the id\n    // of the card being hovered will be \"hover\", which will trigger the css for transforming.\n    this.setState({ hoverClass: newArray })\n\n  }\n\n  unhover = () => {\n    // setting the entire array that handles the css classname for the hover transform to \"\".  no ID needed\n    this.setState({ hoverClass: \"\" })\n  }\n\n  makeClick = (id) => {\n    \n    this.setState({ message: \"\" });\n    this.setState({ messageColor: \"\" });\n    \n    \n    // Lose condition\n    if (this.state.picturesClicked.includes(id)) {\n      this.setState({ pointsScored: 0 });\n      this.setState({ picturesClicked: [] });\n      this.setState({ message: \"You Lose!  Try again\" });\n      this.setState({ messageColor: \"redText\" });\n      this.setState({ open: true});\n      console.log(`state is ${this.state.open}`);\n      this.randomize();\n    }\n    else {\n      this.state.picturesClicked.push(id);\n\n      // Win Condition\n      if (this.state.pointsScored === this.state.pictures.length) {\n        this.setState({ message: \"You Win!  Game is reset.\" });\n        this.setState({ messageColor: \"greenText\" });\n      }\n      // Continue Condition\n      else {\n        // Update High Score Condition\n        if (this.state.pointsScored === this.state.highScore) {\n          this.randomize();\n          this.setState({ pointsScored: this.state.pointsScored + 1 });\n          this.setState({ highScore: this.state.pointsScored + 1 });\n        }\n        else {\n          // Do not Update High Score Condition\n          this.randomize();\n          this.setState({ pointsScored: this.state.pointsScored + 1 });\n        }\n      }\n\n    }\n  }\n\n  componentDidMount() {\n    this.randomize();\n  }\n\n  randomize = () => {\n    const newArray = [];\n    let cap = this.state.pictures.length;\n    // cap var is here to increase the length that the for loop runs, because.. my if statement \"skips\" an iteration if satisfied\n    // starting cap at 9, and increasing by one if we ever \"skip\" \n    for (let i = 0; i <= cap; i++) {\n      // RANDOM NUMBER is 0 through 8\n      var random = Math.floor(Math.random() * 9);;\n      // If this new array has nine members, end this function by setting state\n      if (newArray.length === 9) {\n        this.setState({ pictures: newArray });\n      }\n\n      else {\n        if (newArray.includes(this.state.pictures[random])) {\n          //console.log(\"existing instance, skipping...\")\n          cap++;\n          continue;\n        }\n        else {\n          newArray.push(this.state.pictures[random]);\n        }\n      }\n    }\n  }\n\n  hideModal = () => {\n    this.setState({open: false});\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron\n        pointsScored={this.state.pointsScored}\n        highScore={this.state.highScore}>\n        </Jumbotron>\n        <GameModal\n        open={this.state.open}\n        hideModal={this.hideModal}\n        winOrLose={this.state.message}\n        color={this.state.messageColor}\n        >\n        </GameModal>\n        <div className=\"outerCardsContainer\">\n          <div className=\"cardsContainer\">\n            {\n              // for each in pictures (WHICH IS AN ARRAY), give me an array of <Cards with these props inside> </Cards>\n              this.state.pictures.map((pics, index) =>\n                <Cards\n                  route={pics.route}\n                  id={pics.id}\n\n                  hover={this.hover}\n                  unhover={this.unhover}\n                  // using the hoverClass array, use index number (index is the current index number in a map result array.\n                  // This way, the hoverClasses are applied as they should be\n                  hoverClass={this.state.hoverClass[index]}\n\n                  key={pics.id}\n\n                  makeClick={this.makeClick}\n                  test2={this.test2}\n                >\n                </Cards>\n              )\n            }\n          </div>\n        </div>\n\n      </Wrapper>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}